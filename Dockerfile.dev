#Docker.dev와 같이 기본 Docker 파일이 아닐 경우 실행할 땐 아래와 같은 {}를 포함한 명령어를 활용
#docker build {-f Dockerfile.dev} [-t 이미지 명] ./
#docker 환경에선 node_modules를 삭제해줘도 됨(용량이 너무 크기 때문에 느려지는 원인)
#docker run [-it] -p {연결할 포트}:{컨테이너 내부 포트} {이미지 명}
#react에서 핫 리로드 동작 시 -e CHOKIDAR_USEPOLLING=true 옵션 추가 필요(이미지 명 앞에 추가)
#이미지명 : docker_react
#테스트 진행 시 : docker run -it {아이디}/{이미지명} npm run test (react 앱 테스트 시 명령어 npm run test는 현재 디렉토리에 node_module이 없기 때문에 진행되지 않음)

FROM node:alpine

#EACCES: permission denied, mkdir '/usr/src/app/node_module/.cache'
#error 해결(디렉터리 추가 및 권한 부여, build가 제대로 됐는지 확인하기)
RUN cd /usr
RUN mkdir /usr/app
RUN chmod -R 777 /usr/app
#

WORKDIR /usr/app

#COPY를 사용했을 경우 build를 다시해주지 않는 이상 변함이 없음
COPY package.json ./

RUN npm install

#node_module에 들어있는 라이브러리가 모두 복사되기 때문에 용량이 크고 느리다, 현재 디렉토리에 존재하는 node_module은 제거하고 진행,
#docker 환경 안에서 WORKDIR로 지정한 폴더 아래에 node_module이 생성되기 때문에 지워도 상관없음
COPY ./ ./

CMD ["npm","run", "start"]

#docker 실행 명령어 : docker run -i -p {연결 포트} : {컨테이너 내부 포트} -v {NODE_MODULES 경로} -v $(pwd):/{app의 경로(여기선 usr/app)} {이미지 명}
#위의 실행어를 줄이기 위해 docker-compose.yml 작성, 작성 후 실행 시 명령어 docker-compose up 으로 실행 가능